---
# AWS credentials Secret
# NOTE: In production environments, this Secret should ideally be managed separately 
# from the Helm chart for better security practices. This is included here for simplicity.
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.insecureApp.awsCredentials.secretName | default "aws-credentials" }}
  namespace: {{ .Values.insecureApp.namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
type: Opaque
data:
  # These are placeholder values that should be overridden during deployment
  # Do not store actual credentials in this template
  aws-access-key-id: {{ .Values.aws.accessKeyId | default "" | b64enc | quote }}
  aws-secret-access-key: {{ .Values.aws.secretAccessKey | default "" | b64enc | quote }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.insecureApp.appName }}
  namespace: {{ .Values.insecureApp.namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.insecureApp.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.insecureApp.appName }}
  template:
    metadata:
      labels:
        app: {{ .Values.insecureApp.appName }}
      annotations:
        kubescape.io/max-sniffing-time: "5m"
    spec:
      containers:
      - name: {{ .Values.insecureApp.appName }}
        image: "{{ .Values.insecureApp.image.repository }}:{{ .Values.insecureApp.image.tag }}"
        env:
        - name: SCRIPT_NAME
          value: /app
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.insecureApp.awsCredentials.secretName | default "aws-credentials" }}
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.insecureApp.awsCredentials.secretName | default "aws-credentials" }}
              key: aws-secret-access-key
        securityContext:
          privileged: true
        volumeMounts:                   
        - name: docker-socket
          mountPath: /var/run/docker.sock
        - name: data
          mountPath: /data
      volumes:                         
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: data
        persistentVolumeClaim:
          claimName: insecure-app-data
      serviceAccountName: insecure-app-sa
---
kind: Service
apiVersion: v1
metadata:
  name: insecure-app
  namespace: {{ .Values.insecureApp.namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  selector:
    app: {{ .Values.insecureApp.appName }}
  ports:
  - name: http
    port: {{ .Values.insecureApp.ports.http }}
    targetPort: {{ .Values.insecureApp.ports.http }}
  - name: ssh
    port: {{ .Values.insecureApp.ports.ssh }}
    targetPort: {{ .Values.insecureApp.ports.ssh }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: insecure-app-sa
  namespace: {{ .Values.insecureApp.namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: insecure-app-admin
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
subjects:
- kind: ServiceAccount
  name: insecure-app-sa
  namespace: {{ .Values.insecureApp.namespace }}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: insecure-app-data
  namespace: {{ .Values.insecureApp.namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: insecure-app
  namespace: {{ .Values.insecureApp.namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
  - http:
      paths:
      - path: /app/?(.*)
        pathType: Prefix
        backend:
          service:
            name: insecure-app
            port:
              number: {{ .Values.insecureApp.ports.http }}
