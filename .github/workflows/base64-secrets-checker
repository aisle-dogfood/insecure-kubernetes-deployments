name: Generate Fake Secrets for Testing

on:
  workflow_dispatch:  # Allow manual triggering

jobs:
  generate-fake-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub Tokens
        run: |
          echo "::group::GitHub Tokens (Base64 Encoded)"
          
          # Generate fake GitHub personal access token
          FAKE_GH_TOKEN="ghp_$(openssl rand -hex 20)"
          echo "Fake GitHub PAT: $FAKE_GH_TOKEN"
          echo "Base64 encoded: $(echo -n "$FAKE_GH_TOKEN" | base64)"
          echo "Double encoded: $(echo -n "$FAKE_GH_TOKEN" | base64 | base64)"
          
          # Generate fake GitHub OAuth token
          FAKE_GH_OAUTH="gho_$(openssl rand -hex 20)"
          echo "Fake GitHub OAuth: $FAKE_GH_OAUTH"
          echo "Base64 encoded: $(echo -n "$FAKE_GH_OAUTH" | base64)"
          
          # Generate fake GitHub user-to-server token
          FAKE_GH_USER="ghu_$(openssl rand -hex 20)"
          echo "Fake GitHub User Token: $FAKE_GH_USER"
          echo "Base64 encoded: $(echo -n "$FAKE_GH_USER" | base64)"
          
          # Generate fake GitHub server-to-server token
          FAKE_GH_SERVER="ghs_$(openssl rand -hex 20)"
          echo "Fake GitHub Server Token: $FAKE_GH_SERVER"
          echo "Base64 encoded: $(echo -n "$FAKE_GH_SERVER" | base64)"
          
          # Generate fake GitHub refresh token
          FAKE_GH_REFRESH="ghr_$(openssl rand -hex 20)"
          echo "Fake GitHub Refresh Token: $FAKE_GH_REFRESH"
          echo "Base64 encoded: $(echo -n "$FAKE_GH_REFRESH" | base64)"
          
          echo "::endgroup::"

      - name: Generate AWS Credentials
        run: |
          echo "::group::AWS Credentials (Base64 Encoded)"
          
          # Generate fake AWS access key
          FAKE_AWS_KEY="AKIA$(openssl rand -hex 8 | tr '[:lower:]' '[:upper:]')"
          FAKE_AWS_SECRET="$(openssl rand -base64 30)"
          
          echo "Fake AWS Access Key: $FAKE_AWS_KEY"
          echo "Base64 encoded: $(echo -n "$FAKE_AWS_KEY" | base64)"
          
          echo "Fake AWS Secret: $FAKE_AWS_SECRET"
          echo "Base64 encoded: $(echo -n "$FAKE_AWS_SECRET" | base64)"
          
          # Create a JSON with credentials and encode it
          AWS_CREDS=$(cat <<EOF
          {
            "AccessKey": "$FAKE_AWS_KEY",
            "SecretKey": "$FAKE_AWS_SECRET"
          }
          EOF
          )
          
          echo "AWS Credentials JSON, Base64 encoded:"
          echo -n "$AWS_CREDS" | base64
          
          echo "::endgroup::"

      - name: Generate API Keys
        run: |
          echo "::group::API Keys (Base64 Encoded)"
          
          # Generate fake generic API key
          FAKE_API_KEY="api_key_$(openssl rand -hex 16)"
          echo "Fake API Key: $FAKE_API_KEY"
          echo "Base64 encoded: $(echo -n "$FAKE_API_KEY" | base64)"
          
          # Generate fake Stripe API key
          FAKE_STRIPE_KEY="sk_test_$(openssl rand -hex 24)"
          echo "Fake Stripe Key: $FAKE_STRIPE_KEY"
          echo "Base64 encoded: $(echo -n "$FAKE_STRIPE_KEY" | base64)"
          
          # Generate fake Twilio API key
          FAKE_TWILIO_SID="AC$(openssl rand -hex 16)"
          FAKE_TWILIO_TOKEN="$(openssl rand -hex 16)"
          echo "Fake Twilio SID: $FAKE_TWILIO_SID"
          echo "Base64 encoded: $(echo -n "$FAKE_TWILIO_SID" | base64)"
          echo "Fake Twilio Token: $FAKE_TWILIO_TOKEN"
          echo "Base64 encoded: $(echo -n "$FAKE_TWILIO_TOKEN" | base64)"
          
          echo "::endgroup::"

      - name: Generate Private Keys and Certificates
        run: |
          echo "::group::Private Keys and Certificates (Base64 Encoded)"
          
          # Generate a self-signed certificate and private key
          openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=example.com" 2>/dev/null
          
          PRIVATE_KEY=$(cat key.pem)
          CERTIFICATE=$(cat cert.pem)
          
          echo "RSA Private Key, Base64 encoded:"
          cat key.pem | base64
          
          echo "Certificate, Base64 encoded:"
          cat cert.pem | base64
          
          # Generate SSH key and encode it
          ssh-keygen -t rsa -b 2048 -f id_rsa -N "" -q
          
          echo "SSH Private Key, Base64 encoded:"
          cat id_rsa | base64
          
          echo "::endgroup::"

      - name: Generate Database Connection Strings
        run: |
          echo "::group::Database Connection Strings (Base64 Encoded)"
          
          # Generate fake PostgreSQL connection string
          FAKE_PG_CONN="postgresql://user:$(openssl rand -hex 8)@database.example.com:5432/db_name"
          echo "Fake PostgreSQL Connection: $FAKE_PG_CONN"
          echo "Base64 encoded: $(echo -n "$FAKE_PG_CONN" | base64)"
          
          # Generate fake MySQL connection string
          FAKE_MYSQL_CONN="mysql://admin:$(openssl rand -hex 8)@mysql.example.com/database"
          echo "Fake MySQL Connection: $FAKE_MYSQL_CONN"
          echo "Base64 encoded: $(echo -n "$FAKE_MYSQL_CONN" | base64)"
          
          # Generate fake MongoDB connection string
          FAKE_MONGO_CONN="mongodb+srv://user:$(openssl rand -hex 10)@cluster0.mongodb.net/test?retryWrites=true&w=majority"
          echo "Fake MongoDB Connection: $FAKE_MONGO_CONN"
          echo "Base64 encoded: $(echo -n "$FAKE_MONGO_CONN" | base64)"
          
          echo "::endgroup::"

      - name: Generate JWT Tokens
        run: |
          echo "::group::JWT Tokens (Base64 Encoded)"
          
          # Create fake JWT header
          JWT_HEADER='{"alg":"HS256","typ":"JWT"}'
          # Create fake JWT payload with various claims
          JWT_PAYLOAD=$(cat <<EOF
          {
            "sub": "1234567890",
            "name": "Test User",
            "iat": 1516239022,
            "exp": 1718577022,
            "iss": "test-issuer",
            "aud": "test-audience"
          }
          EOF
          )
          
          # Base64 encode each part
          HEADER_B64=$(echo -n "$JWT_HEADER" | base64 | tr -d '=' | tr '+/' '-_')
          PAYLOAD_B64=$(echo -n "$JWT_PAYLOAD" | base64 | tr -d '=' | tr '+/' '-_')
          # Fake signature (not valid, just for testing)
          SIGNATURE=$(openssl rand -hex 16)
          
          # Combine to form the JWT
          FAKE_JWT="${HEADER_B64}.${PAYLOAD_B64}.${SIGNATURE}"
          
          echo "Fake JWT Token: $FAKE_JWT"
          echo "Base64 encoded: $(echo -n "$FAKE_JWT" | base64)"
          
          echo "::endgroup::"

      - name: Combine Multiple Secrets in a Single String
        run: |
          echo "::group::Combined Secrets (Multiple in one string)"
          
          # Create a file with multiple secrets in different formats
          cat > multi-secret.txt << EOF
          This file contains multiple secrets in one file.
          
          GitHub token: ghp_$(openssl rand -hex 20)
          
          Base64 encoded AWS key: $(echo -n "AKIA$(openssl rand -hex 8 | tr '[:lower:]' '[:upper:]')" | base64)
          
          Configuration file content:
          {
            "apiKey": "$(openssl rand -hex 16)",
            "githubToken": "$(echo -n "gho_$(openssl rand -hex 20)" | base64)",
            "database": {
              "user": "admin",
              "password": "$(openssl rand -base64 12)"
            }
          }
          EOF
          
          echo "File with multiple secrets, Base64 encoded:"
          cat multi-secret.txt | base64
          
          echo "::endgroup::"

      - name: Embed Secrets in Different File Formats
        run: |
          echo "::group::Secrets in Different Formats"
          
          # Create a fake environment file (.env)
          cat > .env.fake << EOF
          # API Configuration
          API_KEY=$(openssl rand -hex 16)
          API_SECRET=$(openssl rand -base64 24)
          
          # GitHub Access
          GITHUB_TOKEN=gho_$(openssl rand -hex 20)
          
          # Database
          DB_PASSWORD=$(openssl rand -base64 16)
          MONGO_URI=mongodb+srv://admin:$(openssl rand -hex 12)@example.mongodb.net/database
          EOF
          
          echo "Fake .env file, Base64 encoded:"
          cat .env.fake | base64
          
          # Create a fake YAML config
          cat > config.yaml << EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: app-secrets
          data:
            api_key: $(echo -n "$(openssl rand -hex 16)" | base64)
            github_token: $(echo -n "ghp_$(openssl rand -hex 20)" | base64)
            jwt_secret: $(openssl rand -base64 32)
          EOF
          
          echo "Fake YAML config, Base64 encoded:"
          cat config.yaml | base64
          
          echo "::endgroup::"

      - name: Generate Outputs Summary
        run: |
          echo "## Secret Detection Test Data" >> $GITHUB_STEP_SUMMARY
          echo "This workflow has generated various fake secrets for testing your detection tool." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Generated GitHub tokens (PAT, OAuth, etc.)" >> $GITHUB_STEP_SUMMARY
          echo "✅ Generated AWS credentials" >> $GITHUB_STEP_SUMMARY
          echo "✅ Generated API keys" >> $GITHUB_STEP_SUMMARY
          echo "✅ Generated private keys and certificates" >> $GITHUB_STEP_SUMMARY
          echo "✅ Generated database connection strings" >> $GITHUB_STEP_SUMMARY
          echo "✅ Generated JWT tokens" >> $GITHUB_STEP_SUMMARY
          echo "✅ Generated combined secrets in various formats" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All of these have been output to the workflow logs in base64 encoded format." >> $GITHUB_STEP_SUMMARY
